\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Nov 24 21:11:54 UYT 2021
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , javaLoopTreatment-javaLoopTreatment\\:efficient , methodExpansion-methodExpansion\\:modularOnly
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=7000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../src/main/java/com/key";

\proofObligation "#Proof Obligation Settings
#Wed Nov 24 21:11:54 UYT 2021
contract=com.key.LinearSearch[com.key.LinearSearch\\:\\:linearSearch([I,int)].JML normal_behavior operation contract.0
name=com.key.LinearSearch[com.key.LinearSearch\\:\\:linearSearch([I,int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "matiashrnndz" ) (keyVersion "3ddfc1d216"))

(autoModeTime "1665")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "a,key,result_21,exc_25,heapAtPre_0,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "5") (term "0,0,1,0,1"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "4"))
 (builtin "One Step Simplification" (formula "2"))
(rule "inEqSimp_ltToLeq" (formula "5") (term "0,1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,1,0,0,0,0,1"))
(rule "polySimp_addComm1" (formula "5") (term "0,0,1,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "5") (term "0,1,0,0,0,1"))
(rule "times_zero_1" (formula "5") (term "1,0,0,0,1,0,0,0,1"))
(rule "add_zero_right" (formula "5") (term "0,0,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,0,0,1"))
(rule "assignment" (formula "5") (term "1"))
 (builtin "One Step Simplification" (formula "5"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "5") (term "1,1,0,0,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0,1,1,0,0,0,1"))
(rule "mul_literals" (formula "5") (term "0,1,1,0,0,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,1,0,0,0,1"))
(rule "mul_literals" (formula "5") (term "1,0,1,0,0,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "5") (term "0,0,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "5") (term "0,0,1,0,0,0,0,1"))
(rule "nnf_imp2or" (formula "5") (term "0,1,1,0,0,0,1"))
(rule "nnf_notAnd" (formula "5") (term "0,0,1,1,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "5") (term "0,0,0,1,1,0,0,0,1"))
(rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0,1,1,0,0,0,1"))
(rule "add_zero_right" (formula "5") (term "0,0,0,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,1,1,0,0,0,1"))
(rule "mul_literals" (formula "5") (term "1,0,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "5") (term "1,0,0,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0,1,1,0,0,0,1"))
(rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0,1,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0,1,1,0,0,0,1"))
(rule "add_literals" (formula "5") (term "0,0,0,1,0,0,1,1,0,0,0,1"))
(rule "add_zero_left" (formula "5") (term "0,0,1,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,1,1,0,0,0,1"))
(rule "methodBodyExpand" (formula "5") (term "1") (newnames "heapBefore_linearSearch,savedHeapBefore_linearSearch,_aBefore_linearSearch,_keyBefore_linearSearch"))
 (builtin "One Step Simplification" (formula "5"))
(rule "variableDeclarationAssign" (formula "5") (term "1"))
(rule "variableDeclaration" (formula "5") (term "1") (newnames "i"))
(rule "assignment" (formula "5") (term "1"))
 (builtin "One Step Simplification" (formula "5"))
(rule "loopScopeInvDia" (formula "5") (term "1") (newnames "i_0,o,f") (inst "#x=x_1") (inst "#variant=x") (inst "#permissionsBefore_LOOP=h_2") (inst "#savedHeapBefore_LOOP=h_1") (inst "#heapBefore_LOOP=h") (inst "anon_permissions_LOOP=anon_permissions_LOOP_0") (inst "anon_savedHeap_LOOP=anon_savedHeap_LOOP_0") (inst "anon_heap_LOOP=anon_heap_LOOP_0"))
(branch "Invariant Initially Valid"
    (builtin "One Step Simplification" (formula "5"))
   (rule "leq_literals" (formula "5") (term "0,0"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,1"))
   (rule "times_zero_1" (formula "5") (term "1,0,0,1,0,0,1"))
   (rule "add_zero_right" (formula "5") (term "0,0,1,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "5") (term "0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,1"))
   (rule "mul_literals" (formula "5") (term "1,1,0,0,1"))
   (rule "nnf_imp2or" (formula "5") (term "0,1"))
   (rule "nnf_notAnd" (formula "5") (term "0,0,1"))
   (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0,1"))
   (rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0,1"))
   (rule "add_zero_right" (formula "5") (term "0,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,1"))
   (rule "mul_literals" (formula "5") (term "1,0,0,0,1"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "inEqSimp_geqRight" (formula "5"))
   (rule "times_zero_1" (formula "1") (term "1,0,0"))
   (rule "add_zero_right" (formula "1") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
   (rule "mul_literals" (formula "1") (term "1"))
   (rule "arrayLengthIsAnInt" (formula "1") (term "0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "arrayLengthNotNegative" (formula "1") (term "0"))
   (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
   (rule "qeq_literals" (formula "1") (term "0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
(branch "Invariant Preserved and Used"
    (builtin "One Step Simplification" (formula "6"))
   (rule "translateJavaSubInt" (formula "6") (term "0,1,1,1,0,1,1"))
   (rule "translateJavaSubInt" (formula "6") (term "0,1,1,0,1"))
   (rule "impRight" (formula "6"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "eqSymm" (formula "9") (term "0,0,1,0,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "9") (term "0,1,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "9") (term "0,1,1,0"))
   (rule "polySimp_addComm0" (formula "9") (term "0,1,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "9") (term "0,1,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,0,0,1,1,0,1"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,0,0,1,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,0,0,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,0,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,0,0,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "2"))
   (rule "inEqSimp_commuteLeq" (formula "1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "3") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,1,0,0,1,1,0,1"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,1,0,0,1,1,0,1"))
   (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,1,0,0,1,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,1,0,0,1,1,0,1"))
   (rule "mul_literals" (formula "9") (term "0,1,1,0,0,1,0,0,1,1,0,1"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,1,0,0,1,1,0,1"))
   (rule "nnf_imp2or" (formula "3") (term "0"))
   (rule "nnf_notAnd" (formula "3") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "3") (term "0,0,0"))
   (rule "times_zero_1" (formula "3") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "3") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,0"))
   (rule "mul_literals" (formula "3") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "3") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "3") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "3") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "3") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0"))
   (rule "nnf_imp2or" (formula "9") (term "0,1,0,0,1,1,0,1"))
   (rule "nnf_notAnd" (formula "9") (term "0,0,1,0,0,1,1,0,1"))
   (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,1,0,0,1,1,0,1"))
   (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,1,0,0,1,1,0,1"))
   (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,1,0,0,1,1,0,1"))
   (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,1,0,0,1,1,0,1"))
   (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,1,0,0,1,1,0,1"))
   (rule "add_zero_left" (formula "9") (term "0,0,1,0,0,1,0,0,1,1,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,1,0,0,1,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,1,0,0,1,1,0,1"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,1,0,0,1,1,0,1"))
   (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,1,0,0,1,1,0,1"))
   (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0,1,0,0,1,1,0,1"))
   (rule "add_zero_right" (formula "9") (term "0,0,0,0,0,1,0,0,1,1,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,1,0,0,1,1,0,1"))
   (rule "mul_literals" (formula "9") (term "1,0,0,0,1,0,0,1,1,0,1"))
   (rule "ifElseUnfold" (formula "9") (term "1") (inst "#boolv=x_2"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_2"))
   (rule "compound_less_than_comparison_2" (formula "9") (term "1") (inst "#v1=x_4") (inst "#v0=x_3"))
   (rule "variableDeclarationAssign" (formula "9") (term "1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_3"))
   (rule "assignment" (formula "9") (term "1"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "variableDeclarationAssign" (formula "9") (term "1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_4"))
   (rule "assignment_read_length" (formula "9"))
   (branch "Normal Execution (_a != null)"
       (builtin "One Step Simplification" (formula "9"))
      (rule "less_than_comparison_simple" (formula "9") (term "1"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "9") (term "0,0,0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "9") (term "0,0,0,1,0"))
      (rule "arrayLengthNotNegative" (formula "2") (term "0"))
      (rule "arrayLengthIsAnInt" (formula "3") (term "0"))
       (builtin "One Step Simplification" (formula "3"))
      (rule "true_left" (formula "3"))
      (rule "ifElseSplit" (formula "10"))
      (branch "if x_2 true"
          (builtin "One Step Simplification" (formula "11"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "1"))
         (rule "inEqSimp_homoInEq0" (formula "4") (term "0"))
         (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0"))
         (rule "add_literals" (formula "4") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "4") (term "1,0,0"))
         (rule "add_zero_right" (formula "4") (term "0,0"))
         (rule "qeq_literals" (formula "4") (term "0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "true_left" (formula "4"))
         (rule "ifUnfold" (formula "10") (term "1") (inst "#boolv=x_2"))
         (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_5"))
         (rule "compound_equality_comparison_1" (formula "10") (term "1") (inst "#v0=x_6"))
         (rule "variableDeclarationAssign" (formula "10") (term "1"))
         (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_6"))
         (rule "assignment_array2" (formula "10"))
         (branch "Normal Execution (_a != null)"
             (builtin "One Step Simplification" (formula "10"))
            (rule "equality_comparison_simple" (formula "10") (term "1"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "ifSplit" (formula "10"))
            (branch "if x_5 true"
                (builtin "One Step Simplification" (formula "11"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "blockReturn" (formula "11") (term "1"))
               (rule "blockReturn" (formula "11") (term "1"))
               (rule "lsReturnNonVoid" (formula "11") (term "1"))
               (rule "assignment" (formula "11") (term "1"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "methodCallReturn" (formula "11") (term "1"))
               (rule "assignment" (formula "11") (term "1"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "methodCallEmpty" (formula "11") (term "1"))
               (rule "tryEmpty" (formula "11") (term "1"))
               (rule "emptyModality" (formula "11") (term "1"))
                (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "3")) (ifInst ""  (formula "2")) (ifInst ""  (formula "1")))
               (rule "impRight" (formula "11"))
               (rule "allRight" (formula "12") (inst "sk=x_0"))
               (rule "orRight" (formula "12"))
               (rule "orRight" (formula "12"))
               (rule "notRight" (formula "14"))
               (rule "inEqSimp_leqRight" (formula "13"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_geqRight" (formula "14"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "7"))
               (rule "qeq_literals" (formula "4") (term "0"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "closeFalse" (formula "4"))
            )
            (branch "if x_5 false"
                (builtin "One Step Simplification" (formula "11"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "assignmentAdditionInt" (formula "11") (term "1"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "translateJavaAddInt" (formula "11") (term "0,1,0"))
               (rule "polySimp_addComm0" (formula "11") (term "0,1,0"))
               (rule "blockEmpty" (formula "11") (term "1"))
               (rule "lsContinue" (formula "11") (term "1"))
                (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "1")))
               (rule "polySimp_mulComm0" (formula "11") (term "0,0,1"))
               (rule "polySimp_rightDist" (formula "11") (term "0,0,1"))
               (rule "mul_literals" (formula "11") (term "0,0,0,1"))
               (rule "precOfInt" (formula "11") (term "1"))
               (rule "inEqSimp_ltToLeq" (formula "11") (term "1,1"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,1"))
               (rule "polySimp_mulAssoc" (formula "11") (term "0,1,0,0,1,1"))
               (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,0,0,1,1"))
               (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0,0,1,1"))
               (rule "polySimp_elimOne" (formula "11") (term "0,1,0,0,1,1"))
               (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,1"))
               (rule "polySimp_addAssoc" (formula "11") (term "0,1,1"))
               (rule "polySimp_addComm1" (formula "11") (term "0,0,1,1"))
               (rule "polySimp_pullOutFactor2b" (formula "11") (term "0,1,1"))
               (rule "add_literals" (formula "11") (term "1,1,0,1,1"))
               (rule "times_zero_1" (formula "11") (term "1,0,1,1"))
               (rule "add_zero_right" (formula "11") (term "0,1,1"))
               (rule "polySimp_addAssoc" (formula "11") (term "0,1,1"))
               (rule "polySimp_addComm1" (formula "11") (term "0,0,1,1"))
               (rule "add_literals" (formula "11") (term "0,0,0,1,1"))
               (rule "add_zero_left" (formula "11") (term "0,0,1,1"))
               (rule "polySimp_pullOutFactor1" (formula "11") (term "0,1,1"))
               (rule "add_literals" (formula "11") (term "1,0,1,1"))
               (rule "times_zero_1" (formula "11") (term "0,1,1"))
               (rule "leq_literals" (formula "11") (term "1,1"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "inEqSimp_homoInEq0" (formula "11") (term "1"))
               (rule "times_zero_2" (formula "11") (term "1,0,1"))
               (rule "add_zero_right" (formula "11") (term "0,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0"))
               (rule "mul_literals" (formula "11") (term "1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,1"))
               (rule "polySimp_rightDist" (formula "11") (term "1,1"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1"))
               (rule "mul_literals" (formula "11") (term "0,1,1"))
               (rule "polySimp_elimOne" (formula "11") (term "1,1,1"))
               (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "inEqSimp_subsumption1" (formula "11") (term "0") (ifseqformula "2"))
               (rule "leq_literals" (formula "11") (term "0,0"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "allRight" (formula "11") (inst "sk=k_0"))
               (rule "orRight" (formula "11"))
               (rule "notRight" (formula "12"))
               (rule "orRight" (formula "12"))
               (rule "inEqSimp_leqRight" (formula "12"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_geqRight" (formula "13"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1"))
               (rule "polySimp_elimOne" (formula "1") (term "1"))
               (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
               (rule "times_zero_1" (formula "2") (term "0,0"))
               (rule "add_zero_left" (formula "2") (term "0"))
               (rule "allLeft" (formula "7") (inst "t=k_0"))
               (rule "replace_known_left" (formula "7") (term "0,1") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "inEqSimp_contradInEq1" (formula "7") (term "0") (ifseqformula "2"))
               (rule "qeq_literals" (formula "7") (term "0,0"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "inEqSimp_antiSymm" (formula "7") (ifseqformula "1"))
               (rule "applyEqRigid" (formula "3") (term "0,2,0") (ifseqformula "7"))
               (rule "close" (formula "14") (ifseqformula "3"))
            )
         )
         (branch "Null Reference (_a = null)"
            (rule "false_right" (formula "11"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
            (rule "closeFalse" (formula "1"))
         )
         (branch "Index Out of Bounds (_a != null, but i Out of Bounds!)"
            (rule "false_right" (formula "11"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
            (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "1") (term "0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
            (rule "mul_literals" (formula "1") (term "1,1"))
            (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "3"))
            (rule "qeq_literals" (formula "1") (term "0,1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
            (rule "andLeft" (formula "1"))
            (rule "inEqSimp_homoInEq1" (formula "1"))
            (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "1,1,0"))
            (rule "times_zero_1" (formula "1") (term "1,0"))
            (rule "add_zero_right" (formula "1") (term "0"))
            (rule "leq_literals" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "if x_2 false"
          (builtin "One Step Simplification" (formula "11"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "inEqSimp_geqRight" (formula "9"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1"))
         (rule "polySimp_elimOne" (formula "1") (term "1"))
         (rule "inEqSimp_antiSymm" (formula "4") (ifseqformula "1"))
         (rule "applyEq" (formula "1") (term "0") (ifseqformula "4"))
         (rule "inEqSimp_homoInEq0" (formula "1"))
         (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
         (rule "add_literals" (formula "1") (term "1,0"))
         (rule "times_zero_1" (formula "1") (term "0"))
         (rule "qeq_literals" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
         (rule "inEqSimp_homoInEq1" (formula "4"))
         (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
         (rule "add_literals" (formula "4") (term "1,0"))
         (rule "times_zero_1" (formula "4") (term "0"))
         (rule "leq_literals" (formula "4"))
         (rule "true_left" (formula "4"))
         (rule "applyEq" (formula "2") (term "0") (ifseqformula "3"))
         (rule "applyEq" (formula "9") (term "1,0,1,1,0") (ifseqformula "2"))
         (rule "polySimp_pullOutFactor2" (formula "9") (term "0,1,1,0"))
         (rule "add_literals" (formula "9") (term "1,0,1,1,0"))
         (rule "times_zero_1" (formula "9") (term "0,1,1,0"))
         (rule "elim_double_block_2" (formula "9") (term "1"))
         (rule "blockBreak" (formula "9") (term "1"))
         (rule "lsBreak" (formula "9") (term "1"))
         (rule "assignment" (formula "9") (term "1"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "methodCallReturn" (formula "9") (term "1"))
         (rule "assignment" (formula "9") (term "1"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "methodCallEmpty" (formula "9") (term "1"))
         (rule "tryEmpty" (formula "9") (term "1"))
         (rule "emptyModality" (formula "9") (term "1"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "qeq_literals" (formula "9") (term "0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "leq_literals" (formula "9") (term "0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "allRight" (formula "9") (inst "sk=x_0"))
         (rule "orRight" (formula "9"))
         (rule "orRight" (formula "9"))
         (rule "notRight" (formula "11"))
         (rule "inEqSimp_geqRight" (formula "11"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "inEqSimp_leqRight" (formula "11"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "5"))
         (rule "polySimp_addComm1" (formula "2") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1"))
         (rule "polySimp_rightDist" (formula "2") (term "1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
         (rule "mul_literals" (formula "2") (term "0,1"))
         (rule "polySimp_elimOne" (formula "2") (term "1,1"))
         (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
         (rule "times_zero_1" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "1"))
         (rule "leq_literals" (formula "5") (term "0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "true_left" (formula "5"))
         (rule "allLeft" (formula "6") (inst "t=x_0"))
         (rule "replace_known_left" (formula "6") (term "0,1") (ifseqformula "4"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "inEqSimp_contradInEq1" (formula "6") (term "0") (ifseqformula "2"))
         (rule "qeq_literals" (formula "6") (term "0,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "6"))
         (rule "andLeft" (formula "3"))
         (rule "inEqSimp_homoInEq1" (formula "3"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
         (rule "polySimp_rightDist" (formula "3") (term "1,0"))
         (rule "mul_literals" (formula "3") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "3") (term "0"))
         (rule "polySimp_addComm0" (formula "3") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
         (rule "add_literals" (formula "3") (term "1,1,0"))
         (rule "times_zero_1" (formula "3") (term "1,0"))
         (rule "add_zero_right" (formula "3") (term "0"))
         (rule "leq_literals" (formula "3"))
         (rule "closeFalse" (formula "3"))
      )
   )
   (branch "Null Reference (_a = null)"
      (rule "false_right" (formula "10"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
      (rule "closeFalse" (formula "1"))
   )
)
)
}
