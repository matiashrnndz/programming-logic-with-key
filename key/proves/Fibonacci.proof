\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Dec 19 20:41:04 UYT 2021
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=initialisation-initialisation\\:disableStaticInitialisation , wdChecks-wdChecks\\:off , reach-reach\\:on , sequences-sequences\\:on , methodExpansion-methodExpansion\\:modularOnly , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:off , permissions-permissions\\:off , modelFields-modelFields\\:treatAsAxiom , javaLoopTreatment-javaLoopTreatment\\:efficient , assertions-assertions\\:safe , bigint-bigint\\:on , moreSeqRules-moreSeqRules\\:on , Strings-Strings\\:on , wdOperator-wdOperator\\:L , integerSimplificationRules-integerSimplificationRules\\:full , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=7000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[Strategy]Timeout=-1
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../src/main/java/com/key";

\proofObligation "#Proof Obligation Settings
#Sun Dec 19 20:41:04 UYT 2021
contract=com.key.Fibonacci[com.key.Fibonacci\\:\\:fib_iterative(int)].JML normal_behavior operation contract.0
name=com.key.Fibonacci[com.key.Fibonacci\\:\\:fib_iterative(int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "matiashrnndz" ) (keyVersion "3ddfc1d216"))

(autoModeTime "1260")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "n,self_25,result_21,exc_25,heapAtPre_0,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "8") (term "0,0,0,1"))
(rule "assignment" (formula "8") (term "1"))
 (builtin "One Step Simplification" (formula "8"))
(rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_fib_iterative,savedHeapBefore_fib_iterative,_nBefore_fib_iterative"))
 (builtin "One Step Simplification" (formula "8"))
(rule "variableDeclarationMult" (formula "8") (term "1"))
(rule "variableDeclarationAssign" (formula "8") (term "1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "a"))
(rule "assignment" (formula "8") (term "1"))
 (builtin "One Step Simplification" (formula "8"))
(rule "variableDeclarationMult" (formula "8") (term "1"))
(rule "variableDeclarationAssign" (formula "8") (term "1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "b"))
(rule "assignment" (formula "8") (term "1"))
 (builtin "One Step Simplification" (formula "8"))
(rule "variableDeclarationAssign" (formula "8") (term "1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "i"))
(rule "assignment" (formula "8") (term "1"))
 (builtin "One Step Simplification" (formula "8"))
(rule "blockEmpty" (formula "8") (term "1"))
(rule "loopScopeInvDia" (formula "8") (term "1") (newnames "i_0,b_0,a_0,o,f") (inst "#x=x_1") (inst "#variant=x") (inst "#permissionsBefore_LOOP=h_2") (inst "#savedHeapBefore_LOOP=h_1") (inst "#heapBefore_LOOP=h") (inst "anon_permissions_LOOP=anon_permissions_LOOP_0") (inst "anon_savedHeap_LOOP=anon_savedHeap_LOOP_0") (inst "anon_heap_LOOP=anon_heap_LOOP_0"))
(branch "Invariant Initially Valid"
    (builtin "One Step Simplification" (formula "8"))
   (rule "translateJavaAddInt" (formula "8") (term "2,1,1"))
   (rule "leq_literals" (formula "8") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "add_zero_left" (formula "8") (term "2,1,1"))
   (rule "eqSymm" (formula "8") (term "1,0"))
   (rule "eqSymm" (formula "8") (term "1"))
   (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0"))
   (rule "replace_known_left" (formula "8") (term "0,0") (ifseqformula "5"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "Class_invariant_axiom_for_com_key_Fibonacci" (formula "6") (ifseqformula "3"))
   (rule "true_left" (formula "6"))
   (rule "Contract_axiom_for_fib_in_Fibonacci" (formula "7") (term "0,1"))
   (rule "replace_known_left" (formula "1") (term "1,0,0") (ifseqformula "3"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")) (ifInst ""  (formula "7")))
   (rule "true_left" (formula "1"))
   (rule "Contract_axiom_for_fib_in_Fibonacci" (formula "7") (term "0,0"))
   (rule "replace_known_right" (formula "1") (term "0,1,0") (ifseqformula "7"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")) (ifInst ""  (formula "3")))
   (rule "true_left" (formula "1"))
   (rule "Definition_axiom_for_fib_in_com_key_Fibonacci" (formula "7") (term "0,1") (ifseqformula "3"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "Contract_axiom_for_fib_in_Fibonacci" (formula "7") (term "0"))
   (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "2"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")) (ifInst ""  (formula "7")))
   (rule "true_left" (formula "1"))
   (rule "Definition_axiom_for_fib_in_com_key_Fibonacci" (formula "7") (term "0") (ifseqformula "3"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "closeTrue" (formula "7"))
)
(branch "Invariant Preserved and Used"
    (builtin "One Step Simplification" (formula "9"))
   (rule "translateJavaAddInt" (formula "9") (term "2,1,1,0"))
   (rule "translateJavaSubInt" (formula "9") (term "0,1,1,1,0,1,1"))
   (rule "translateJavaAddInt" (formula "9") (term "2,1,1,0,0,1,1,0,1,1"))
   (rule "translateJavaSubInt" (formula "9") (term "0,1,1,0,1"))
   (rule "impRight" (formula "9"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "eqSymm" (formula "13") (term "1,0,0,0,1,1,0,1"))
   (rule "eqSymm" (formula "13") (term "1,0,0,1,1,0,1"))
   (rule "eqSymm" (formula "13") (term "0,0,1,0,1,1,0,1"))
   (rule "eqSymm" (formula "4"))
   (rule "eqSymm" (formula "3"))
   (rule "polySimp_elimSub" (formula "13") (term "0,1,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "13") (term "0,1,1,0"))
   (rule "polySimp_addComm0" (formula "13") (term "2,0,1,0,0,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "4") (term "2,0"))
   (rule "polySimp_addComm0" (formula "13") (term "0,1,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,0,0,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "1"))
   (rule "inEqSimp_commuteLeq" (formula "2"))
   (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_1"))
   (rule "limit_com_key_Fibonacci_fibint" (formula "3") (term "0"))
   (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
   (rule "limit_com_key_Fibonacci_fibint" (formula "5") (term "0"))
   (rule "applyEq" (formula "5") (term "1") (ifseqformula "6"))
   (rule "ifElseUnfold" (formula "15") (term "1") (inst "#boolv=x_2"))
   (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_2"))
   (rule "less_than_comparison_simple" (formula "15") (term "1"))
    (builtin "One Step Simplification" (formula "15"))
   (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,1,0"))
   (rule "polySimp_addComm1" (formula "15") (term "0,0,0,1,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,0"))
   (rule "ifElseSplit" (formula "15"))
   (branch "if x_2 true"
       (builtin "One Step Simplification" (formula "16"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "variableDeclarationAssign" (formula "16") (term "1"))
      (rule "variableDeclaration" (formula "16") (term "1") (newnames "olda"))
      (rule "assignment" (formula "16") (term "1"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "assignment" (formula "16") (term "1"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "1"))
      (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
      (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0"))
      (rule "add_literals" (formula "3") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "3") (term "1,0,0"))
      (rule "add_zero_right" (formula "3") (term "0,0"))
      (rule "qeq_literals" (formula "3") (term "0"))
       (builtin "One Step Simplification" (formula "3"))
      (rule "true_left" (formula "3"))
      (rule "assignmentAdditionInt" (formula "15") (term "1"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "translateJavaAddInt" (formula "15") (term "0,1,0"))
      (rule "postincrement" (formula "15") (term "1"))
      (rule "compound_int_cast_expression" (formula "15") (term "1") (inst "#v=x_2"))
      (rule "variableDeclarationAssign" (formula "15") (term "1"))
      (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_3"))
      (rule "remove_parentheses_right" (formula "15") (term "1"))
      (rule "assignmentAdditionInt" (formula "15") (term "1"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "translateJavaAddInt" (formula "15") (term "0,1,0"))
      (rule "polySimp_addComm0" (formula "15") (term "0,1,0"))
      (rule "widening_identity_cast_5" (formula "15") (term "1"))
      (rule "assignment" (formula "15") (term "1"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "blockEmpty" (formula "15") (term "1"))
      (rule "lsContinue" (formula "15") (term "1"))
       (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "6")))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0,1"))
      (rule "polySimp_rightDist" (formula "15") (term "1,0,1"))
      (rule "mul_literals" (formula "15") (term "0,1,0,1"))
      (rule "polySimp_addComm0" (formula "15") (term "0,1"))
      (rule "polySimp_addAssoc" (formula "15") (term "2,0,1,0"))
      (rule "add_literals" (formula "15") (term "0,2,0,1,0"))
      (rule "precOfInt" (formula "15") (term "1"))
      (rule "inEqSimp_ltToLeq" (formula "15") (term "1,1"))
      (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,1"))
      (rule "polySimp_mulAssoc" (formula "15") (term "0,1,0,0,1,1"))
      (rule "polySimp_mulComm0" (formula "15") (term "0,0,1,0,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0,1,1"))
      (rule "polySimp_elimOne" (formula "15") (term "0,1,0,0,1,1"))
      (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,1"))
      (rule "polySimp_addAssoc" (formula "15") (term "0,1,1"))
      (rule "polySimp_addComm1" (formula "15") (term "0,0,1,1"))
      (rule "polySimp_pullOutFactor2b" (formula "15") (term "0,1,1"))
      (rule "add_literals" (formula "15") (term "1,1,0,1,1"))
      (rule "times_zero_1" (formula "15") (term "1,0,1,1"))
      (rule "add_zero_right" (formula "15") (term "0,1,1"))
      (rule "polySimp_addAssoc" (formula "15") (term "0,1,1"))
      (rule "polySimp_addComm1" (formula "15") (term "0,0,1,1"))
      (rule "add_literals" (formula "15") (term "0,0,0,1,1"))
      (rule "add_zero_left" (formula "15") (term "0,0,1,1"))
      (rule "polySimp_pullOutFactor1" (formula "15") (term "0,1,1"))
      (rule "add_literals" (formula "15") (term "1,0,1,1"))
      (rule "times_zero_1" (formula "15") (term "0,1,1"))
      (rule "leq_literals" (formula "15") (term "1,1"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,0"))
      (rule "replace_known_left" (formula "15") (term "1,0,0") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "inEqSimp_homoInEq0" (formula "15") (term "1"))
      (rule "times_zero_2" (formula "15") (term "1,0,1"))
      (rule "add_zero_right" (formula "15") (term "0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0"))
      (rule "mul_literals" (formula "15") (term "1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,1"))
      (rule "polySimp_rightDist" (formula "15") (term "1,1"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1"))
      (rule "mul_literals" (formula "15") (term "0,1,1"))
      (rule "polySimp_elimOne" (formula "15") (term "1,1,1"))
      (rule "replace_known_left" (formula "15") (term "1") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "inEqSimp_subsumption1" (formula "15") (term "0") (ifseqformula "2"))
      (rule "leq_literals" (formula "15") (term "0,0"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "Contract_axiom_for_fib_in_Fibonacci" (formula "4") (term "0"))
      (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "10"))
       (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "14")) (ifInst ""  (formula "9")) (ifInst ""  (formula "15")) (ifInst ""  (formula "14")))
      (rule "true_left" (formula "4"))
      (rule "Definition_axiom_for_fib_in_com_key_Fibonacci" (formula "4") (term "0") (ifseqformula "10"))
      (rule "translateJavaAddInt" (formula "4") (term "2,0"))
      (rule "translateJavaSubInt" (formula "4") (term "2,1,2,0"))
      (rule "translateJavaSubInt" (formula "4") (term "2,0,2,0"))
      (rule "polySimp_elimSub" (formula "4") (term "2,1,2,0"))
      (rule "mul_literals" (formula "4") (term "1,2,1,2,0"))
      (rule "polySimp_elimSub" (formula "4") (term "2,0,2,0"))
      (rule "mul_literals" (formula "4") (term "1,2,0,2,0"))
      (rule "polySimp_addComm0" (formula "4") (term "2,1,2,0"))
      (rule "polySimp_addComm0" (formula "4") (term "2,0,2,0"))
      (rule "Definition_axiom_for_fib_in_com_key_Fibonacci" (formula "6") (term "0") (ifseqformula "10"))
      (rule "translateJavaAddInt" (formula "6") (term "2,0"))
      (rule "translateJavaSubInt" (formula "6") (term "2,0,2,0"))
      (rule "translateJavaSubInt" (formula "6") (term "2,1,2,0"))
      (rule "polySimp_homoEq" (formula "6") (term "1,0,0"))
      (rule "polySimp_elimSub" (formula "6") (term "2,0,2,0"))
      (rule "mul_literals" (formula "6") (term "1,2,0,2,0"))
      (rule "polySimp_elimSub" (formula "6") (term "2,1,2,0"))
      (rule "mul_literals" (formula "6") (term "1,2,1,2,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,0,1,0,0"))
      (rule "polySimp_addComm1" (formula "6") (term "2,0,2,0"))
      (rule "add_literals" (formula "6") (term "0,2,0,2,0"))
      (rule "add_zero_left" (formula "6") (term "2,0,2,0"))
      (rule "polySimp_addComm1" (formula "6") (term "2,1,2,0"))
      (rule "add_literals" (formula "6") (term "0,2,1,2,0"))
      (rule "polySimp_rightDist" (formula "6") (term "1,0,1,0,0"))
      (rule "mul_literals" (formula "6") (term "0,1,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "6") (term "0,1,0,0"))
      (rule "add_literals" (formula "6") (term "0,0,1,0,0"))
      (rule "add_zero_left" (formula "6") (term "0,1,0,0"))
      (rule "applyEq" (formula "6") (term "0,2,0") (ifseqformula "3"))
      (rule "polySimp_sepPosMonomial" (formula "6") (term "0,0,0"))
      (rule "mul_literals" (formula "6") (term "1,0,0,0"))
      (rule "polySimp_invertEq" (formula "6") (term "1,0,0"))
      (rule "times_zero_2" (formula "6") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "0,1,0,0"))
      (rule "polySimp_elimOne" (formula "6") (term "0,1,0,0"))
      (rule "inEqSimp_contradEq7" (formula "6") (term "0,0,0") (ifseqformula "2"))
      (rule "add_zero_left" (formula "6") (term "0,0,0,0,0"))
      (rule "mul_literals" (formula "6") (term "0,0,0,0,0"))
      (rule "leq_literals" (formula "6") (term "0,0,0,0"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "Class_invariant_axiom_for_com_key_Fibonacci" (formula "13") (ifseqformula "10"))
      (rule "true_left" (formula "13"))
      (rule "Contract_axiom_for_fib_in_Fibonacci" (formula "14") (term "0"))
      (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")) (ifInst ""  (formula "14")))
      (rule "true_left" (formula "1"))
      (rule "Definition_axiom_for_fib_in_com_key_Fibonacci" (formula "14") (term "0") (ifseqformula "10"))
      (rule "translateJavaAddInt" (formula "14") (term "2,0"))
      (rule "translateJavaSubInt" (formula "14") (term "2,0,2,0"))
      (rule "translateJavaSubInt" (formula "14") (term "2,1,2,0"))
      (rule "polySimp_homoEq" (formula "14") (term "1,0,0"))
      (rule "polySimp_elimSub" (formula "14") (term "2,0,2,0"))
      (rule "mul_literals" (formula "14") (term "1,2,0,2,0"))
      (rule "polySimp_elimSub" (formula "14") (term "2,1,2,0"))
      (rule "mul_literals" (formula "14") (term "1,2,1,2,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,0,1,0,0"))
      (rule "polySimp_addComm1" (formula "14") (term "2,0,2,0"))
      (rule "add_literals" (formula "14") (term "0,2,0,2,0"))
      (rule "polySimp_addComm1" (formula "14") (term "2,1,2,0"))
      (rule "add_literals" (formula "14") (term "0,2,1,2,0"))
      (rule "add_zero_left" (formula "14") (term "2,1,2,0"))
      (rule "polySimp_addComm0" (formula "14") (term "2,0"))
      (rule "polySimp_rightDist" (formula "14") (term "1,0,1,0,0"))
      (rule "mul_literals" (formula "14") (term "0,1,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "14") (term "0,1,0,0"))
      (rule "add_literals" (formula "14") (term "0,0,1,0,0"))
      (rule "applyEq" (formula "14") (term "1,2,0") (ifseqformula "5"))
      (rule "polySimp_addComm0" (formula "14") (term "2,0"))
      (rule "applyEq" (formula "14") (term "1,2,0") (ifseqformula "3"))
      (rule "polySimp_addComm0" (formula "14") (term "2,0"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "orRight" (formula "14"))
      (rule "notRight" (formula "14"))
      (rule "polySimp_homoEq" (formula "15"))
      (rule "mul_literals" (formula "15") (term "1,0"))
      (rule "polySimp_addComm1" (formula "15") (term "0"))
      (rule "polySimp_addComm0" (formula "15") (term "0,0"))
      (rule "polySimp_sepPosMonomial" (formula "1") (term "0"))
      (rule "mul_literals" (formula "1") (term "1,0"))
      (rule "polySimp_sepNegMonomial" (formula "1") (term "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
      (rule "polySimp_elimOne" (formula "1") (term "0,1"))
      (rule "polySimp_sepPosMonomial" (formula "15"))
      (rule "polySimp_mulComm0" (formula "15") (term "1"))
      (rule "polySimp_rightDist" (formula "15") (term "1"))
      (rule "mul_literals" (formula "15") (term "0,1"))
      (rule "inEqSimp_contradEq7" (formula "1") (term "0") (ifseqformula "3"))
      (rule "add_zero_left" (formula "1") (term "0,0,0"))
      (rule "mul_literals" (formula "1") (term "0,0,0"))
      (rule "leq_literals" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEq" (formula "6") (term "1,2,0") (ifseqformula "1"))
      (rule "add_literals" (formula "6") (term "2,0"))
      (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "1"))
      (rule "qeq_literals" (formula "3"))
      (rule "closeFalse" (formula "3"))
   )
   (branch "if x_2 false"
       (builtin "One Step Simplification" (formula "16"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "inEqSimp_geqRight" (formula "14"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1"))
      (rule "polySimp_elimOne" (formula "1") (term "1"))
      (rule "inEqSimp_antiSymm" (formula "3") (ifseqformula "1"))
      (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
      (rule "inEqSimp_homoInEq0" (formula "1"))
      (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
      (rule "add_literals" (formula "1") (term "1,0"))
      (rule "times_zero_1" (formula "1") (term "0"))
      (rule "qeq_literals" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "applyEq" (formula "16") (term "1,0,1,1,0") (ifseqformula "2"))
      (rule "polySimp_pullOutFactor2" (formula "16") (term "0,1,1,0"))
      (rule "add_literals" (formula "16") (term "1,0,1,1,0"))
      (rule "times_zero_1" (formula "16") (term "0,1,1,0"))
      (rule "applyEq" (formula "13") (term "0") (ifseqformula "2"))
      (rule "applyEq" (formula "15") (term "0,0,0,0") (ifseqformula "2"))
      (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
      (rule "inEqSimp_homoInEq1" (formula "3"))
      (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
      (rule "add_literals" (formula "3") (term "1,0"))
      (rule "times_zero_1" (formula "3") (term "0"))
      (rule "leq_literals" (formula "3"))
      (rule "true_left" (formula "3"))
      (rule "elim_double_block_2" (formula "14") (term "1"))
      (rule "blockBreak" (formula "14") (term "1"))
      (rule "lsBreak" (formula "14") (term "1"))
      (rule "assignment" (formula "14") (term "1"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "methodCallReturn" (formula "14") (term "1"))
      (rule "assignment" (formula "14") (term "1"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "methodCallEmpty" (formula "14") (term "1"))
      (rule "tryEmpty" (formula "14") (term "1"))
      (rule "emptyModality" (formula "14") (term "1"))
       (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "12")))
      (rule "applyEq" (formula "14") (term "2,0") (ifseqformula "2"))
      (rule "close" (formula "14") (ifseqformula "4"))
   )
)
)
}
